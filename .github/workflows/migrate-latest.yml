name: Migrate to Current Configured Version of DB

on:
  push:
    branches:
      - main
      - migration_lambda
  workflow_dispatch:

jobs:
  migrate-db:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache sqlx binary for aws arm64
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: sqlx-binary-aarch64-unknown-linux-gnu

      - name: Get sqlx binary if necessary
        run: |
          if ! stat ~/.cargo/bin/sqlx
          then
          dpkg --add-architecture aarch64
          apt-get update
          apt-get install x11:aarch64
          rustup target add aarch64-unknown-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'rustflags = ["-C", "target-cpu=neoverse-n1"]' >> ~/.cargo/config.toml
          cargo install sqlx-cli --no-default-features --features postgres,tls-rustls-aws-lc-rs --target aarch64-unknown-linux-gnu
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Prepare and Deploy AWS Lambda for Migration
        working-directory: ./migrations
        run: |
          cp ~/.cargo/bin/sqlx .
          chmod +x ./bootstrap
          zip -X lambda.zip bootstrap sqlx current_version.txt sql/*
          aws lambda update-function-code --function-name ${{ secrets.AWS_MIGRATION_LAMBDA_NAME }} --zip-file fileb://lambda.zip --publish &> /dev/null
      
      - name: Invoke AWS Lambda for Migration
        run: |
          sleep 3 # wait for a few seconds to ensure the updated lambda is ready
          aws lambda invoke --function-name ${{ secrets.AWS_MIGRATION_LAMBDA_NAME }} output.json &> /dev/null
          cat output.json
